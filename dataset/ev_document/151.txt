0	Estimation of Conditional ProbabilitiesWith Decision Trees and an Application to Fine-Grained POS Tagging
0	We present a HMM part-of-speech tagging method which is particularly suited for POS tagsets with a large number of fine-grained tags.
0	It is based on three ideas: (1) splitting of the POS tags into attribute vectors and decomposition of the contextual POS probabilities of the HMM into a product of attribute probabilities, (2) estimation of the contextual probabilities with decision trees, and (3) use of high-order HMMs.
0	In experiments on German and Czech data, our tagger outperformed state- of-the-art POS taggers.
0	A Hidden-Markov-Model part-of-speech tagger (Brants, 2000, e.g.) computes the most probable POS tag sequence tˆN = tˆ1, ..., tˆN for a given word sequence wN . POS taggers are usually trained on corpora with between 50 and 150 different POS tags.
0	Tagsets of this size contain little or no information about number, gender, case and similar morphosyntac- tic features.
0	For languages with a rich morphology such as German or Czech, more fine-grained tagsets are often considered more appropriate.
0	The additional information may also help to disambiguate the (base) part of speech.
0	Without gender information, for instance, it is difficult for a tagger to correctly disambiguate the German sentence Ist das Realita¨ t?
0	(Is that reality?).
0	The word das is ambiguous between an article and a demonstrative.
0	Because of the lack of gender agreement between das (neuter) and the noun Realita¨ t (feminine), the article reading must be wrong.
0	The German Tiger treebank (Brants et al., 2002) is an example of a corpus with a more fine-grained tagset (over 700 tags overall).
0	Large tagsets aggravate sparse data problems.
0	As an example, take the German sentence Das zu versteuernde Einkommen sinkt (“The to be taxed income decreases”; The tˆN N N 1 = arg max p(t1 , w1 ) 1 The joint probability of the two sequences is defined as the product of context probabilities and lexical probabilities over all POS tags: N taxable income decreases).
0	This sentence should be tagged as shown in table 1.
0	Das ART.Def.Nom.Sg.Neut zu PART.Zu versteuernde ADJA.Pos.Nom.Sg.Neut Einkommen N.Reg.Nom.Sg.Neut p(tN , wN ) = n 1 1 i=1 p(ti|ti−1 ) i−k p(wi|ti) le .
0	(1) context prob.
0	xical prob HMM taggers are fast and were successfully applied to a wide range of languages and training corpora.
0	Qc 2008.
0	Licensed under the Creative Commons Attribution-Noncommercial-Share Alike 3.0 Unported license (http://creativecommons.org/licenses/by-nc-sa/3.0/).
0	Some rights reserved.
0	Table 1: Correct POS tags for the German sentence Das zu versteuernde Einkommen sinkt.
0	Unfortunately, the POS trigram consisting of the tags of the first three words does not occur in the Tiger corpus.
0	(Neither does the pair consisting of the first two tags.)
0	The unsmoothed 777 Proceedings of the 22nd International Conference on Computational Linguistics (Coling 2008), pages 777–784 Manchester, August 2008 context probability of the third POS tag is therefore 0.
0	If the probability is smoothed with the backoff distribution p(•|P ART .Z u), the most probable tag is ADJA.Pos.Acc.Sg.Fem rather than ADJA.Pos.Nom.Sg.Neut.
0	Thus, the agreement between the article and the adjective is not checked anymore.
0	A closer inspection of the Tiger corpus reveals that it actually contains all the information needed to completely disambiguate each component of the POS tag ADJA.Pos.Nom.Sg.Neut: • All words appearing after an article (ART) and the infinitive particle zu (PART.zu) are attributive adjectives (ADJA) (10 of 10 cases).
0	• All adjectives appearing after an article and a particle (PART) have the degree positive (Pos) (39 of 39 cases).
0	• All adjectives appearing after a nominative article and a particle have nominative case (11 of 11 cases).
0	• All adjectives appearing after a singular article and a particle are singular (32 of 32 cases).
0	• All adjectives appearing after a neuter article and a particle are neuter (4 of 4 cases).
0	By (1) decomposing the context probability of ADJA.Pos.Nom.Sg.Neut into a product of attribute probabilities p(ADJA | 2:ART, 2:ART.Def, 2:ART.Nom, 2:ART.Sg, 2:ART.Neut, 1:PART, 1:PART.Zu) ∗ p(Pos| 2:ART, 2:ART.Def, 2:ART.Nom, 2:ART.Sg, 2:ART.Neut, 1:PART, 1:PART.Zu, 0:ADJA) ∗ p(Nom | 2:ART, 2:ART.Def, 2:ART.Nom, 2:ART.Sg, 2:ART.Neut, 1:PART, 1:PART.Zu, 0:ADJA, 0:ADJA.Pos) ∗ p(Sg | 2:ART, 2:ART.Def, 2:ART.Nom, 2:ART.Sg, 2:ART.Neut, 1:PART, 1:PART.Zu, 0:ADJA, 0:ADJA.Pos, 0:ADJA.Nom) ∗ p(Neut | 2:ART, 2:ART.Def, 2:ART.Nom, 2:ART.Sg, 2:ART.Neut, 1:PART, 1:PART.Zu, 0:ADJA, 0:ADJA.Pos, 0:ADJA.Nom, 0:ADJA.Sg) and (2) selecting the relevant context attributes for the prediction of each attribute, we obtain the ∗ p(Sg | 2:ART.Sg, 1:PART.Zu, 0:ADJA) ∗ p(Neut | 2:ART.Neut, 1:PART.Zu, 0:ADJA) The conditional probability of each attribute is 1.
0	Hence the context probability of the whole tag is. also 1.
0	Without having observed the given context, it is possible to deduce that the observed POS tag is the only possible tag in this context.
0	These considerations motivate an HMM tagging approach which decomposes the POS tags into a set of simple attributes, and uses decision trees to estimate the probability of each attribute.
0	Decision trees are ideal for this task because the identification of relevant attribute combinations is at the heart of this method.
0	The backoff smoothing methods of traditional n-gram POS taggers require an ordering of the reduced contexts which is not available, here.
0	Discriminatively trained taggers, on the other hand, have difficulties to handle the huge number of features which are active at the same time if any possible combination of context attributes defines a separate feature.
0	Decision trees (Breiman et al., 1984; Quinlan, 1993) are normally used as classifiers, i.e. they assign classes to objects which are represented as attribute vectors.
0	The non-terminal nodes are labeled with attribute tests, the edges with the possible outcomes of a test, and the terminal nodes are labeled with classes.
0	An object is classified by evaluating the test of the top node on the object, following the respective edge to a daughter node, evaluating the test of the daughter node, and so on until a terminal node is reached whose class is assigned to the object.
0	Decision Trees are turned into probability estimation trees by storing a probability for each possible class at the terminal nodes instead of a single result class.
0	Figure 1 shows a probability estimation tree for the prediction of the probability of the nominative attribute of nouns.
0	2.1 Induction of Decision Trees.
0	Decision trees are incrementally built by first selecting the test which splits the manually annotated training sample into the most homogeneous subsets with respect to the class.
0	This test, which maximizes the information gain1 wrt.
0	the class, is following expression for the context probability: 1 The information gain measures how much the test de-.
0	p(ADJA | ART, PART.Zu) ∗ p(Pos | 2:ART, 1:PART, 0:ADJA) ∗ p(Nom | 2:ART.Nom, 1:PART.Zu, 0:ADJA) creases the uncertainty about the class.
0	It is the difference between the entropy of the empirical distribution of the class variable in the training set and the weighted average entropy yes 0:N.Name yes no 1:ART.Nom no 1:ADJA.Nom yes no which returns a probability of 0.3.
0	The third tree for neuter has one non terminal and two terminal nodes returning a probability of 0.3 and 0.5, respectively.
0	The sum of probabilities is therefore either 0.9 or 1.1, but never exactly 1.
0	This problem 2:N.Reg p=0.999 0:N.Name 0:N.Name yes no p=0.571 p=0.938 yes no p=0.948 p=0.998 .... is solved by renormalizing the probabilities.
0	The probability of an attribute (such as “Nom”) is always conditioned on the respective base POS (such as “N”) (unless the predicted attribute is theFigure 1: Probability estimation tree for the nomi native case of nouns.
0	The test 1:ART.Nom checks if the preceding word is a nominative article.
0	assigned to the top node.
0	The tree is recursively expanded by selecting the best test for each subset and so on, until all objects of the current subset belong to the same class.
0	In a second step, the decision tree may be pruned in order to avoid overfit- ting to the training data.
0	Our tagger generates a predictor for each feature (such as base POS, number, gender etc.) Instead of using a single tree for the prediction of all possible values of a feature (such as noun, article, etc. for base POS), the tagger builds a separate decision tree for each value.
0	The motivation was that a tree which predicts a single value (say verb) does not fragment the data with tests which are only relevant for the distinction of two other values (e.g. article and possessive pronoun).2 Furthermore, we observed that such two-class decision trees require no optimization of the pruning threshold (see also section 2.2.) The tree induction algorithm only considers binary tests, which check whether some particular attribute is present or not.
0	The best test for each node is selected with the standard information gain criterion.
0	The recursive tree building process terminates if the information gain is 0.
0	The decision tree is pruned with the pruning criterion described below.
0	Since the tagger creates a separate tree for each attribute, the probabilities of a set of competing attributes such as masculine, feminine, and neuter will not exactly sum up to 1.
0	To understand why, assume that there are three trees for the gender attributes.
0	Two of them (say the trees for masculine and feminine) consist of a single terminal node base POS) in order to make sure that the probability of an attribute is 0 if it never appeared with the respective base POS.
0	All context attributes other than the base POS are always used in combination with the base POS.
0	A typical context attribute is “1:ART.Nom” which states that the preceding tag is an article with the attribute “Nom”.
0	“1:ART” is also a valid attribute specification, but “1:Nom” is not.
0	The tagger further restricts the set of possible test attributes by requiring that some attribute of the POS tag at position i-k (i=position of the predicted POS tag, k ≥ 1) must have been used be fore an attribute of the POS tag at position i-(k+1) may be examined.
0	This restriction improved the tagging accuracy for large contexts.
0	2.2 Pruning Criterion.
0	The tagger applies3 the critical-value pruning strategy proposed by (Mingers, 1989).
0	A node is pruned if the information gain of the best test multiplied by the size of the data subsample is below a given threshold.
0	To illustrate the pruning, assume that D is the data of the current node with 50 positive and 25 negative elements, and that D1 (with 20 positive and 20 negative elements) and D2 (with 30 positive and 5 negative elements) are the two subsets induced by the best test.
0	The entropy of D is −2/3 log22/3 − 1/3 log21/3 = 0.92, the entropy of D1 is −1/2 log21/2−1/2 log21/2 = 1, and the entropy of D2 is −6/7 log26/7 − 1/7 log21/7 = 0.59.
0	The information gain is therefore 0.92 − (8/15 ∗ 1 − 7/15 ∗ 0.59) = 0.11.
0	The resulting score is 75 ∗ 0.11 = 8.25.
0	Given a threshold of 6, the node is therefore not pruned.
0	We experimented with pre-pruning (where a node is always pruned if the gain is below the in the two subsets.
0	The weight of each subset is proportional to its size.
0	2 We did not directly compare the two alternatives (two- valued vs. multi-valued tests), because the implementational effort required would have been too large.
0	3 We also experimented with a pruning criterion based on binomial tests, which returned smaller trees with a slightly lower accuracy, although the difference in accuracy was never larger than 0.1% for any context size.
0	Thus, the simpler pruning strategy presented here was chosen.
0	threshold) as well as post-pruning (where a node is only pruned if its sub-nodes are terminal nodes or pruned nodes).
0	The performance of pre-pruning was slightly better and it was less dependent on the choice of the pruning threshold.
0	A threshold of 6 consistently produced optimal or near optimal results for pre-pruning.
0	Thus, pre-pruning with a threshold of 6 was used in the experiments.
0	The tagger treats dots in POS tag labels as attribute separators.
0	The first attribute of a POS tag is the main category.
0	The number of additional attributes is fixed for each main category.
0	The additional attributes are category-specific.
0	The singular attribute of a noun and an adjective POS tag are therefore two different attributes.4 Each position in the POS tags of a given category corresponds to a feature.
0	The attributes occurring at a certain position constitute the value set of the feature.
0	Our tagger is a HMM tagger which decomposes the context probabilities into a product of attribute probabilities.
0	The probability of an attribute given the attributes of the preceding POS tags as well asand that the context probability p(ti|ti−1 ) is internally computed as a product of attribute probabili ties.
0	In order to increase the speed, the tagger also applies a beam-search strategy which prunes all search paths whose probability is below the probability of the best path times a threshold.
0	With athreshold of 10−3 or lower, the influence of prun ing on the tagging accuracy was negligible.
0	4.1 Supplementary Lexicon.
0	The tagger may use an external lexicon which supplies entries for additional words which are not found in the training corpus, and additional tags for words which did occur in the training data.
0	If an external lexicon is provided, the lexical probabilities are smoothed as follows: The tagger computes the average tag probabilities of all words with the same set of possible POS tags.
0	The Witten-Bell method is then applied to smooth the lexical probabilities with the average probabilities.
0	If the word w was observed with N different tags, and f (w, t) is the joint frequency of w and POS tag t, and p(t|[w]) is the average probability of t among words with the same set of possible tags as w, then the smoothed probability of t given w is defined as follows: f (w, t) + N p(t|[w]) the preceding attributes of the predicted POS tag is estimated with a decision tree as described be p(t|w) = f (w) + N fore.
0	The probabilities at the terminal nodes of the decision trees are smoothed with the parent node probabilities (which themselves were smoothed in the same way).
0	The smoothing is implemented by adding the weighted class probabilities pp(c) of the parent node to the frequencies f (c) before normalizing them to probabilities: p(c) = f (c) + αpp(c) α + c f (c) The weight α was fixed to 1 after a few experiments on development data.
0	This smoothing strategy is closely related to Witten-Bell smoothing.
0	The probabilities are normalized by dividing them by the total probability of all attribute values of the respective feature (see section 2.1).
0	The best tag sequence is computed with the Viterbi algorithm.
0	The main differences of our tag- ger to a standard trigram tagger are that the order of the Markov model (the k in equation 1) is not fixed 4 This is the reason why the attribute tests in figure 1 used complex attributes such as ART.Nom rather than Nom.The smoothed estimates of p(tag|word) are di vided by the prior probability p(tag) of the tag and used instead of p(word|tag).5 4.2 Unknown Words.
0	The lexical probabilities of unknown words are obtained as follows: The unknown words are divided into four disjoint classes6 with numeric expressions, words starting with an uppercase letter, words starting with a lowercase letter, and a fourth class for the other words.
0	The tagger builds a suffix trie for each class of unknown words using the known word types from that class.
0	The maximal length of the suffixes is 7.
0	The suffix tries are pruned until (i) all suffixes have a frequency of at least 5 and (ii) the information gain multiplied by the suffix frequency and di 5 p(word|tag) is equal to p(tag|word)p(word)/p(tag) and p(word) is a constant if the tokenization is unambiguous.
0	Therefore dropping the factor p(word) has no influence on the ranking of the different tag sequences.
0	6 In earlier experiments, we had used a much larger number of word classes.
0	Decreasing their number to 4 turned out to be better.
0	a threshold of 1.
0	More precisely, if Tα is the set of POS tags that occurred with suffix α, |T | is the size of the set T , fα is the frequency of suffix α, and pα(t) is the probability of POS tag t among the words with suffix α, then the following condition must hold: tion between definite and indefinite articles, and the distinction between hyphens, slashes, left and right parentheses, quotation marks, and other symbols which the Tiger treebank annotates with “$(”.
0	A supplementary lexicon was created by analyzing a word list which included all words from the faα paα (t) log paα(t) < 1 training, development, and test data with a German computationa l morphology.
0	The analyses gener |Taα| t∈Taα pα(t) ated by the morphology were mapped to the Tiger The POS probabilities are recursively smoothed with the POS probabilities of shorter suffixes using Witten-Bell smoothing.
0	Our tagger was first evaluated on data from the German Tiger treebank.
0	The results were compared to those obtained with the TnT tagger (Brants, 2000) and the SVMTool (Gime´nez and Ma`rquez, 2004), which is based on support vector machines.7 The training of the SVMTool took more than a day.
0	Therefore it was not possible to optimize the parameters systematically.
0	We took standard features from a 5 word window and M4LRL training without optimization of the regular- ization parameter C. In a second experiment, our tagger was also evaluated on the Czech Academic corpus 1.0 (Hladka´ et al., 2007) and compared to the TnT tag- ger.
0	5.1 Tiger Corpus.
0	The German Tiger treebank (Brants et al., 2002) contains over 888,000 tokens.
0	It is annotated with POS tags from the coarse-grained STTS tagset and with additional features encoding information about number, gender, case, person, degree, tense, and mood.
0	After deleting problematic sentences (e.g. with an incomplete annotation) and automatically correcting some easily detectable errors, 885,707 tokens were left.
0	The first 80% were used as training data, the first half of the rest as development data, and the last 10% as test data.
0	Some of the 54 STTS labels were mapped to new labels with dots, which reduced the number of main categories to 23.
0	Examples are the nominal POS tags NN and NE which were mapped to N.Reg and N.Name.
0	Some lexically decidable distinctions missing in the Tiger corpus have been tagset.
0	Note that only the words, but not the POS tags from the test and development data were used, here.
0	Therefore, it is always possible to create a supplementary lexicon for the corpus to be processed.
0	In case of the TnT tagger, the entries of the supplementary lexicon were added to the regular lexicon with a default frequency of 1 if the word/tag- pair was unknown, and with a frequency proportional to the prior probability of the tag if the word was unknown.
0	This strategy returned the best results on the development data.
0	In case of the SVM- Tool, we were not able to successfully integrate the supplementary lexicon.
0	5.1.1 Refined Tagset Prepositions are not annotated with case in the Tiger treebank, although this information is important for the disambiguation of the case of the next noun phrase.
0	In order to provide the tagger with some information about the case of prepositions, a second training corpus was created in which prepositions which always select the same case, such as durch (through), were annotated with this case (APPR.Acc).
0	Prepositions which select genitive case, but also occur with dative case8, were tagged with APPR.Gen. The more frequent ones of the remaining prepositions, such as in (in), were lexicalized (APPR.in).
0	The refined tagset also distinguished between the auxiliaries sein, haben, and werden, and used lexicalized tags for the coordinating conjunctions aber, doch, denn, wie, bis, noch, and als whose distribution differs from the distribution of prototypical coordinating conjunctions such as und (and) or oder (or).
0	For evaluation purposes, the refined tags are mapped back to the original tags.
0	This mapping is unambiguous.
0	7 It was planned to include also the Stanford tagger.
0	(Toutanova et al., 2003) in this comparison, but it was not possible to train it on the Tiger data.
0	8 In German, the genitive case of arguments is more and.
0	more replaced by the dative.
0	Table 2: Tagging accuracies on development data in percent.
0	Results for 2 and for 10 preceding POS tags as context are reported for our tagger.
0	much smaller.
0	Table 3 shows the results of an evaluation based on the plain STTS tagset.
0	The first result was obtained with TnT trained on Tiger data which was mapped to STTS before.
0	The second row contains the results for the TnT tagger when it is trained on the Tiger data and the output is mapped to STTS.
0	The third row gives the corresponding figures for our tagger.
0	5.1.2 Results Table 2 summarizes the results obtained with different taggers and tagsets on the development data.
0	The accuracy of a baseline tagger which chooses the most probable tag9 ignoring the context is 67.3% without and 69.4% with the supple 92.3 92.2 92.1 92 91.9 91.8 91.7 91.6 91.5 91.4 2 3 4 5 6 7 8 9 10 mentary lexicon.
0	The TnT tagger achieves 86.3% accuracy on the default tagset.
0	A tag is considered correct if all attributes are correct.
0	The tagset refinement increases the accuracy by about 0.6%, and the external lexicon by another 3.5%.
0	The SVMTool is slightly better than the TnT tagger on the default tagset, but shows little improvement from the tagset refinement.
0	Apparently, the lexical features used by the SVMTool encode most of the information of the tagset refinement.
0	With a context of two preceding POS tags (similar to the trigram tagger TnT), our tagger outperforms TnT by 0.7% on the default tagset, by 1% on the refined tagset, and by 1.1% on the refined tagset plus the additional lexicon.
0	A larger context of up to 10 preceding POS tags further increased the accuracy by 0.6, 0.6, and 0.7%, respectively.
0	de fa ult refined ref.+lexicon T n T S T T S T n T Ti g e r 1 0 t a g s 9 7.
0	2 8 9 7.
0	1 7 97.26 97.51 9 7.
1	3 9 97.57 97.97 Table 3: STTS accuracies of the TnT tagger trained on the STTS tagset, the TnT tagger trained on the Tiger tagset, and our tagger trained on the Tiger tagset.
0	These figures are considerably lower than e.g. the 96.7% accuracy reported in Brants (2000) for the Negra treebank which is annotated with STTS tags without agreement features.
0	This is to 9 Unknown words are tagged by choosing the most frequent tag of words with the same capitalization.
0	Figure 2: Tagging accuracy on development data depending on context size Figure 2 shows that the tagging accuracy tends to increase with the context size.
0	The best results are obtained with a context size of 10.
0	What type of information is relevant across a distance of ten words?
0	A good example is the decision tree for the attribute first person of finite verbs, which looks for a first person pronoun at positions -1 through -10 (relative to the position of the current word) in this order.
0	Since German is a verb-final language, these tests clearly make sense.
0	Table 4 shows the performance on the test data.
0	Our tagger was used with a context size of 10.
0	The suffix length parameter of the TnT tagger was set to 6 without lexicon and to 3 with lexicon.
0	These values were optimal on the development data.
0	The accuracy of our tagger is lower than on the development data.
0	This could be due to the higher rate of unknown words (10.0% vs. 7.7%).
0	Relative to the TnT tagger, however, the accuracy is quite similar for test and development data.
0	The differences between the two taggers are significant.10 ta gg er de fa ult refined ref.+lexicon Tn T ou r ta gg er 8 3.
0	4 5 84.11 89.14 8 5.
0	0 0 85.92 91.07 Table 4: Tagging accuracies on test data.
0	By far the most frequent tagging error was the confusion of nominative and accusative case.
0	If 10 726 sentences were better tagged by TnT (i.e. with few errors), 1450 sentences were better tagged by our tagger.
0	The resulting score of a binomial test is below 0.001.
0	this error is not counted, the tagging accuracy on the development data rises from 92.17% to 94.27%.
0	Our tagger is quite fast, although not as fast as the TnT tagger.
0	With a context size of 3 (10), it annotates 7000 (2000) tokens per second on a computer with an Athlon X2 4600 CPU.
0	The training with a context size of 10 took about 4 minutes.
0	5.2 Czech Academic Corpus.
0	We also evaluated our tagger on the Czech Academic corpus (Hladka´ et al., 2007) which contains 652.131 tokens and about 1200 different POS tags.
0	The data was divided into 80% training data, 10% development data and 10% test data.
0	89 88.9 88.8 Provost & Domingos (2003) noted that well- known decision tree induction algorithms such as C4.5 (Quinlan, 1993) or CART (Breiman et al., 1984) fail to produce accurate probability estimates.
0	They proposed to grow the decision trees to their maximal size without pruning, and to smooth the probability estimates with add-1 smoothing (also known as the Laplace correction).
0	Ferri et al.
0	(2003) describe a more complex backoff smoothing method.
0	Contrary to them, we applied pruning and found that some pruning (threshold=6) gives better results than no pruning (threshold=0).
0	Another difference is that we used N two- class trees with normalization to predict the probabilities of N classes.
0	These two-class trees can be pruned with a fixed pruning threshold.
0	Hence there is no need to put aside training data for parameter tuning.
0	88.7 88.6 88.5 ’ c o n t e x t d a t a 2 ’ 2 3 4 5 6 7 8 9 10 A n ope n que stio n is wh eth er the SV MT ool (or oth er dis cri min ativ ely trai ned tag ger s) cou ld out - perf orm the pre sen ted tag ger if the sa me dec om positi on of PO S tag s and the sa me con text size wasFigure 3: Accuracy on development data depend ing on context size The best accuracy of our tagger on the development set was 88.9% obtained with a context of 4 preceding POS tags.
0	The best accuracy of the TnT tagger was 88.2% with a maximal suffix length of 5.
0	The corresponding figures for the test data are.
0	89.53% for our tagger and 88.88% for the TnT tag- ger.
0	The difference is significant.
0	Our tagger combines two ideas, the decomposition of the probability of complex POS tags into a product of feature probabilities, and the estimation of the conditional probabilities with decision trees.
0	A similar idea was previously presented in Kempe (1994), but apparently never applied again.
0	The tagging accuracy reported by Kempe was below that of a traditional trigram tagger.
0	Unlike him, we found that our tagging method outperformed state-of-the-art POS taggers on fine-grained POS tagging even if only a trigram context was used.
0	Schmid (1994) and Ma`rquez (1999) used decision trees for the estimation of contextual tag probabilities, but without a decomposition of the tag probability.
0	Magerman (1994) applied probabilistic decision trees to parsing, but not with a generative model.
0	used.
0	We think that this might be the case if the SVM features are restricted to the set of relevant attribute combinations discovered by the decision tree, but we doubt that it is possible to train the SVMTool (or other discriminatively trained tag- gers) without such a restriction given the difficulties to train it with the standard context size.
0	Czech POS tagging has been extensively studied in the past (Hajicˇ and Vidova´-Hladka´, 1998; Hajicˇ et al., 2001; Votrubec, 2006).
0	Spoustov et al.
0	(2007) compared several POS taggers including an n-gram tagger and a discriminatively trained tagger (Morcˇe), and evaluated them on the Prague Dependency Treebank (PDT 2.0).
0	Morcˇe’s tagging accuracy was 95.12%, 0.3% better than the n-gram tagger.
0	A hybrid system based on four different tagging methods reached an accuracy of 95.68%.
0	Because of the different corpora used and the different amounts of lexical information available, a direct comparison to our results is difficult.
0	Furthermore, our tagger uses no corpus-specific heuristics, whereas Morcˇe e.g. is optimized for Czech POS tagging.
0	The German tagging results are, to the best of our knowledge, the first published results for fine- grained POS tagging with the Tiger tagset.
0	We presented a HMM POS tagger for fine-grained tagsets which splits the POS tags into attribute vectors and estimates the conditional probabilities of the attributes with decision trees.
0	In experiments with German and Czech corpora, this method achieved a higher tagging accuracy than two state-of-the-art general-purpose POS taggers (TnT and SVMTool).
