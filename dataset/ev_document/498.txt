0	Word Re-ordering and DP-based Search in Statistical Machine Translation
0	In this paper, we describe a search procedure for statistical machine translation (MT) based on dynamic programming (DP).
0	Starting from a DP-based solution to the traveling salesman problem, we present a novel technique to restrict the possible word reordering between source and target language in order to achieve an eÆcient search algorithm.
0	A search restriction especially useful for the translation direction from German to English is presented.
0	The experimental tests are carried out on the Verbmobil task (GermanEnglish, 8000-word vocabulary), which is a limited-domain spoken-language task.
0	The goal of machine translation is the translation of a text given in some source language into a target language.
0	We are given a source string fJ 1 = f1:::fj :::fJ of length J, which is to be translated into a target string eI 1 = e1:::ei:::eI of length I. Among all possible target strings, we will choose the string with the highest probability: ^eI 1 = arg max eI 1 fPr(eI 1jfJ 1 )g = arg max eI 1 fPr(eI 1) Pr(fJ 1 jeI 1)g : (1) The argmax operation denotes the search problem, i.e. the generation of the output sentence in the target language.
0	Pr(eI 1) is the language model of the target language, whereas Pr(fJ 1 jeI1) is the transla tion model.
0	Our approach uses word-to-word dependencies between source and target words.
0	The model is often further restricted so that each source word is assigned to exactly one target word (Brown et al., 1993; Ney et al., 2000).
0	These alignment models are similar to the concept of hidden Markov models (HMM) in speech recognition.
0	The alignment mapping is j ! i = aj from source position j to target position i = aj . The use of this alignment model raises major problems if a source word has to be aligned to several target words, e.g. when translating German compound nouns.
0	A simple extension will be used to handle this problem.
0	In Section 2, we brie y review our approach to statistical machine translation.
0	In Section 3, we introduce our novel concept to word reordering and a DP-based search, which is especially suitable for the translation direction from German to English.
0	This approach is compared to another reordering scheme presented in (Berger et al., 1996).
0	In Section 4, we present the performance measures used and give translation results on the Verbmobil task.
0	In this section, we brie y review our translation approach.
0	In Eq.
0	(1), Pr(eI 1) is the language model, which is a trigram language model in this case.
0	For the translation model Pr(fJ 1 jeI 1), we go on the assumption that each source word is aligned to exactly one target word.
0	The alignment model uses two kinds of parameters: alignment probabilities p(aj jaj􀀀1; I; J), where the probability of alignment aj for position j depends on the previous alignment position aj􀀀1 (Ney et al., 2000) and lexicon probabilities p(fj jeaj ).
0	When aligning the words in parallel texts (for language pairs like SpanishEnglish, French-English, ItalianGerman,...), we typically observe a strong localization effect.
0	In many cases, there is an even stronger restriction: over large portions of the source string, the alignment is monotone.
0	2.1 Inverted Alignments.
0	To explicitly handle the word reordering between words in source and target language, we use the concept of the so-called inverted alignments as given in (Ney et al., 2000).
0	An inverted alignment is defined as follows: inverted alignment: i ! j = bi: Target positions i are mapped to source positions bi.
0	What is important and is not expressed by the notation is the so-called coverage constraint: each source position j should be 'hit' exactly once by the path of the inverted alignment bI 1 = b1:::bi:::bI . Using the inverted alignments in the maximum approximation, we obtain as search criterion: max I (p(JjI) max eI 1 ( I Yi=1 p(eijei􀀀1 i􀀀2) max bI 1 I Yi=1 [p(bijbi􀀀1; I; J) p(fbi jei)])) = = max I (p(JjI) max eI 1;bI 1 ( I Yi=1 p(eijei􀀀1 i􀀀2) p(bijbi􀀀1; I; J) p(fbi jei)])); where the two products over i have been merged into a single product over i. p(eijei􀀀1 i􀀀2) is the trigram language model probability.
0	The inverted alignment probability p(bijbi􀀀1; I; J) and the lexicon probability p(fbi jei) are obtained by relative frequency estimates from the Viterbi alignment path after the final training iteration.
0	The details are given in (Och and Ney, 2000).
0	The sentence length probability p(JjI) is omitted without any loss in performance.
0	For the inverted alignment probability p(bijbi􀀀1; I; J), we drop the dependence on the target sentence length I. 2.2 Word Joining.
0	The baseline alignment model does not permit that a source word is aligned to two or more target words, e.g. for the translation direction from German toEnglish, the German compound noun 'Zahnarztter min' causes problems, because it must be translated by the two target words dentist's appointment.
0	We use a solution to this problem similar to the one presented in (Och et al., 1999), where target words are joined during training.
0	The word joining is done on the basis of a likelihood criterion.
0	An extended lexicon model is defined, and its likelihood is compared to a baseline lexicon model, which takes only single-word dependencies into account.
0	E.g. when 'Zahnarzttermin' is aligned to dentist's, the extended lexicon model might learn that 'Zahnarzttermin' actuallyhas to be aligned to both dentist's and ap pointment.
0	In the following, we assume that this word joining has been carried out.
0	Machine Translation In this case my colleague can not visit on I n d i e s e m F a l l ka nn m e i n K o l l e g e a m the v i e r t e n M a i n i c h t b e s u c h e n S i e you fourth of May Figure 1: Reordering for the German verbgroup.
0	In order to handle the necessary word reordering as an optimization problem within our dynamic programming approach, we describe a solution to the traveling salesman problem (TSP) which is based on dynamic programming (Held, Karp, 1962).
0	The traveling salesman problem is an optimization problem which is defined as follows: given are a set of cities S = s1; ; sn and for each pair of cities si; sj the cost dij > 0 for traveling from city si to city sj . We are looking for the shortest tour visiting all cities exactly once while starting and ending in city s1.
0	A straightforward way to find the shortest tour is by trying all possible permutations of the n cities.
0	The resulting algorithm has a complexity of O(n!).
0	However, dynamic programming can be used to find the shortest tour in exponential time, namely in O(n22n), using the algorithm by Held and Karp.
0	The approach recursively evaluates a quantity Q(C; j), where C is the set of already visited cities and sj is the last visited city.
0	Subsets C of increasing cardinality c are processed.
0	The algorithm works due to the fact that not all permutations of cities have to be considered explicitly.
0	For a given partial hypothesis (C; j), the order in which the cities in C have been visited can be ignored (except j), only the score for the best path reaching j has to be stored.
0	This algorithm can be applied to statistical machine translation.
0	Using the concept of inverted alignments, we explicitly take care of the coverage constraint by introducing a coverage set C of source sentence positions that have been already processed.
0	The advantage is that we can recombine search hypotheses by dynamic programming.
0	The cities of the traveling salesman problem correspond to source Table 1: DP algorithm for statistical machine translation.
0	input: source string f1:::fj :::fJ initialization for each cardinality c = 1; 2; ; J do for each pair (C; j), where j 2 C and jCj = c do for each target word e 2 E Qe0 (e; C; j) = p(fj je) max Æ;e00 j02Cnfjg fp(jjj0; J) p(Æ) pÆ(eje0; e00) Qe00 (e0;C n fjg; j0)g words fj in the input string of length J. For the final translation each source position is considered exactly once.
0	Subsets of partial hypotheses with coverage sets C of increasing cardinality c are processed.
0	For a trigram language model, the partial hypotheses are of the form (e0; e; C; j).
0	e0; e are the last two target words, C is a coverage set for the already covered source positions and j is the last position visited.
0	Each distance in the traveling salesman problem now corresponds to the negative logarithm of the product of the translation, alignment and language model probabilities.
0	The following auxiliary quantity is defined: Qe0 (e; C; j) := probability of the best partial hypothesis (ei 1; bi 1), where C = fbkjk = 1; ; ig, bi = j, ei = e and ei􀀀1 = e0.
1	The type of alignment we have considered so far requires the same length for source and target sentence, i.e. I = J. Evidently, this is an unrealistic assumption, therefore we extend the concept of inverted alignments as follows: When adding a new position to the coverage set C, we might generate either Æ = 0 or Æ = 1 new target words.
0	For Æ = 1, a new target language word is generated using the trigram language model p(eje0; e00).
0	For Æ = 0, no new target word is generated, while an additional source sentence position is covered.
0	A modified language model probability pÆ(eje0; e00) is defined as follows: pÆ(eje0; e00) =  1:0 if Æ = 0 p(eje0; e00) if Æ = 1 : We associate a distribution p(Æ) with the two cases Æ = 0 and Æ = 1 and set p(Æ = 1) = 0:7.
0	The above auxiliary quantity satisfies the following recursive DP equation: Qe0 (e; C; j) = Initial Skip Verb Final 1.
0	In.
0	2.
0	diesem 3.
0	Fall.
0	4.
0	mein 5.
0	Kollege.
0	6.
0	kann 7.nicht 8.
0	besuchen 9.
0	Sie.
0	10.
0	am 11.
0	vierten 12.
0	Mai.
0	13.
0	Figure 2: Order in which source positions are visited for the example given in Fig.1.
0	= p(fj je) max Æ;e00 j02Cnfjg np(jjj0; J) p(Æ) pÆ(eje0; e00) Qe00 (e0;C n fjg; j 0 )o: The DP equation is evaluated recursively for each hypothesis (e0; e; C; j).
0	The resulting algorithm is depicted in Table 1.
0	The complexity of the algorithm is O(E3 J2 2J), where E is the size of the target language vocabulary.
0	3.1 Word ReOrdering with Verbgroup.
0	Restrictions: Quasi-monotone Search The above search space is still too large to allow the translation of a medium length input sentence.
0	On the other hand, only very restricted reorderings are necessary, e.g. for the translation direction from Table 2: Coverage set hypothesis extensions for the IBM reordering.
0	No: Predecessor coverage set Successor coverage set 1 (f1; ;mg n flg ; l0) !
0	(f1; ;mg ; l) 2 (f1; ;mg n fl; l1g ; l0) !
0	(f1; ;mg n fl1g ; l) 3 (f1; ;mg n fl; l1; l2g ; l0) !
0	(f1; ;mg n fl1; l2g ; l) 4 (f1; ;m 􀀀 1g n fl1; l2; l3g ; l0) !
0	(f1; ;mg n fl1; l2; l3g ;m) German to English the monotonicity constraint is violated mainly with respect to the German verbgroup.
0	In German, the verbgroup usually consists of a left and a right verbal brace, whereas in English the words of the verbgroup usually form a sequence of consecutive words.
0	Our new approach, which is called quasi-monotone search, processes the source sentence monotonically, while explicitly taking into account the positions of the German verbgroup.
0	A typical situation is shown in Figure 1.
0	When translating the sentence monotonically from left to right, the translation of the German finite verb 'kann', which is the left verbal brace in this case, is postponed until the German noun phrase 'mein Kollege' is translated, which is the subject of the sentence.
0	Then, the German infinitive 'besuchen' and the negation particle 'nicht' are translated.
0	The translation of one position in the source sentence may be postponed for up to L = 3 source positions, and the translation of up to two source positions may be anticipated for at most R = 10 source positions.
0	To formalize the approach, we introduce four verbgroup states S: Initial (I): A contiguous, initial block of source positions is covered.
0	Skipped (K): The translation of up to one word may be postponed . Verb (V): The translation of up to two words may be anticipated.
0	Final (F): The rest of the sentence is processed monotonically taking account of the already covered positions.
0	While processing the source sentence monotonically, the initial state I is entered whenever there are no uncovered positions to the left of the rightmost covered position.
0	The sequence of states needed to carry out the word reordering example in Fig.
0	1 is given in Fig.
0	2.
0	The 13 positions of the source sentence are processed in the order shown.
0	A position is presented by the word at that position.
0	Using these states, we define partial hypothesis extensions, which are of the following type: (S0;C n fjg; j0) !
0	(S; C; j); Not only the coverage set C and the positions j; j0, but also the verbgroup states S; S0 are taken into account.
0	To be short, we omit the target words e; e0 in the formulation of the search hypotheses.
0	There are 13 types of extensions needed to describe the verbgroup reordering.
0	The details are given in (Tillmann, 2000).
0	For each extension a new position is added to the coverage set.
0	Covering the first uncovered position in the source sentence, we use the language model probability p(ej$; $).
0	Here, $ is the sentence boundary symbol, which is thought to be at position 0 in the target sentence.
0	The search starts in the hypothesis (I; f;g; 0).
0	f;g denotes the empty set, where no source sentence position is covered.
0	The following recursive equation is evaluated: Qe0 (e; S; C; j) = (2) = p(fj je) max Æ;e00 np(jjj0; J) p(Æ) pÆ(eje0; e00) max (S0;j0) (S0 ;Cnfjg;j0)!(S;C;j) j02Cnfjg Qe00 (e0; S0;C n fjg; j0)o: The search ends in the hypotheses (I; f1; ; Jg; j).
0	f1; ; Jg denotes a coverage set including all positions from the starting position 1 to position J and j 2 fJ 􀀀L; ; Jg.
0	The final score is obtained from: max e;e0 j2fJ􀀀L;;Jg p($je; e0) Qe0 (e; I; f1; ; Jg; j); where p($je; e0) denotes the trigram language model, which predicts the sentence boundary $ at the end of the target sentence.
0	The complexity of the quasimonotone search is O(E3 J (R2+LR)).
0	The proof is given in (Tillmann, 2000).
0	3.2 Reordering with IBM Style.
0	Restrictions We compare our new approach with the word reordering used in the IBM translation approach (Berger et al., 1996).
0	A detailed description of the search procedure used is given in this patent.
0	Source sentence words are aligned with hypothesized target sentence words, where the choice of a new source word, which has not been aligned with a target word yet, is restricted1.
0	A procedural definition to restrict1In the approach described in (Berger et al., 1996), a mor phological analysis is carried out and word morphemes rather than full-form words are used during the search.
0	Here, we process only full-form words within the translation procedure.
0	the number of permutations carried out for the word reordering is given.
0	During the search process, a partial hypothesis is extended by choosing a source sentence position, which has not been aligned with a target sentence position yet.
0	Only one of the first n positions which are not already aligned in a partial hypothesis may be chosen, where n is set to 4.
0	The restriction can be expressed in terms of the number of uncovered source sentence positions to the left of the rightmost position m in the coverage set.
0	This number must be less than or equal to n 􀀀 1.
0	Otherwise for the predecessor search hypothesis, we would have chosen a position that would not have been among the first n uncovered positions.
0	Ignoring the identity of the target language words e and e0, the possible partial hypothesis extensions due to the IBM restrictions are shown in Table 2.
0	In general, m; l; l0 6= fl1; l2; l3g and in line umber 3 and 4, l0 must be chosen not to violate the above reordering restriction.
0	Note that in line 4 the last visited position for the successor hypothesis must be m. Otherwise , there will be four uncovered positions for the predecessor hypothesis violating the restriction.
0	A dynamic programming recursion similar to the one in Eq. 2 is evaluated.
0	In this case, we have no finite-state restrictions for the search space.
0	The search starts in hypothesis (f;g; 0) and ends in the hypotheses (f1; ; Jg; j), with j 2 f1; ; Jg.
0	This approach leads to a search procedure with complexity O(E3 J4).
0	The proof is given in (Tillmann, 2000).
0	4.1 The Task and the Corpus.
0	We have tested the translation system on the Verbmobil task (Wahlster 1993).
0	The Verbmobil task is an appointment scheduling task.
0	Two subjects are each given a calendar and they are asked to schedule a meeting.
0	The translation direction is from German to English.
0	A summary of the corpus used in the experiments is given in Table 3.
0	The perplexity for the trigram language model used is 26:5.
0	Although the ultimate goal of the Verbmobil project is the translation of spoken language, the input used for the translation experiments reported on in this paper is the (more or less) correct orthographic transcription of the spoken sentences.
0	Thus, the effects of spontaneous speech are present in the corpus, e.g. the syntactic structure of the sentence is rather less restricted, however the effect of speech recognition errors is not covered.
0	For the experiments, we use a simple preprocessing step.
0	German city names are replaced by category markers.
0	The translation search is carried out with the category markers and the city names are resubstituted into the target sentence as a postprocessing step.
0	Table 3: Training and test conditions for the Verbmobil task (*number of words without punctuation marks).
0	German English Training: Sentences 58 073 Words 519 523 549 921 Words* 418 979 453 632 Vocabulary Size 7939 4648 Singletons 3454 1699 Test-147: Sentences 147 Words 1 968 2 173 Perplexity { 26:5 Table 4: Multi-reference word error rate (mWER) and subjective sentence error rate (SSER) for three different search procedures.
0	Search CPU time mWER SSER Method [sec] [%] [%] MonS 0:9 42:0 30:5 QmS 10:6 34:4 23:8 IbmS 28:6 38:2 26:2 4.2 Performance Measures.
0	The following two error criteria are used in our experiments: mWER: multi-reference WER: We use the Levenshtein distance between the automatic translation and several reference translations as a measure of the translation errors.
0	On average, 6 reference translations per automatic translation are available.
0	The Levenshtein distance between the automatic translation and each of the reference translations is computed, and the minimum Levenshtein distance is taken.
0	This measure has the advantage of being completely automatic.
0	SSER: subjective sentence error rate: For a more detailed analysis, the translations are judged by a human test person.
0	For the error counts, a range from 0:0 to 1:0 is used.
0	An error count of 0:0 is assigned to a perfect translation, and an error count of 1:0 is assigned to a semantically and syntactically wrong translation.
0	4.3 Translation Experiments.
0	For the translation experiments, Eq. 2 is recursively evaluated.
0	We apply a beam search concept as in speech recognition.
0	However there is no global pruning.
0	Search hypotheses are processed separately according to their coverage set C. The best scored hypothesis for each coverage set is computed: QBeam(C) = max e;e0 ;S;j Qe0 (e; S; C; j) The hypothesis (e0; e; S; C; j) is pruned if: Qe0 (e; S; C; j) < t0 QBeam(C); where t0 is a threshold to control the number of surviving hypotheses.
0	Additionally, for a given coverage set, at most 250 different hypotheses are kept during the search process, and the number of different words to be hypothesized by a source word is limited.
0	For each source word f, the list of its possible translations e is sorted according to p(fje) puni(e), where puni(e) is the unigram probability of the English word e. It is suÆcient to consider only the best 50 words.
0	We show translation results for three approaches: the monotone search (MonS), where no word reordering is allowed (Tillmann, 1997), the quasimonotone search (QmS) as presented in this paper and the IBM style (IbmS) search as described in Section 3.2.
0	Table 4 shows translation results for the three approaches.
0	The computing time is given in terms of CPU time per sentence (on a 450MHz PentiumIIIPC).
0	Here, the pruning threshold t0 = 10:0 is used.
0	Translation errors are reported in terms of multireference word error rate (mWER) and subjective sentence error rate (SSER).
0	The monotone search performs worst in terms of both error rates mWER and SSER.
0	The computing time is low, since no reordering is carried out.
0	The quasi-monotone search performs best in terms of both error rates mWER and SSER.
0	Additionally, it works about 3 times as fast as the IBM style search.
0	For our demonstration system, we typically use the pruning threshold t0 = 5:0 to speed up the search by a factor 5 while allowing for a small degradation in translation accuracy.
0	The effect of the pruning threshold t0 is shown in Table 5.
0	The computing time, the number of search errors, and the multi-reference WER (mWER) are shown as a function of t0.
0	The negative logarithm of t0 is reported.
0	The translation scores for the hypotheses generated with different threshold values t0 are compared to the translation scores obtained with a conservatively large threshold t0 = 10:0 . For each test series, we count the number of sentences whose score is worse than the corresponding score of the test series with the conservatively large threshold t0 = 10:0, and this number is reported as the number of search errors.
0	Depending on the threshold t0, the search algorithm may miss the globally optimal path which typically results in additional translation errors.
0	Decreasing the threshold results in higher mWER due to additional search errors.
0	Table 5: Effect of the beam threshold on the number of search errors (147 sentences).
0	Search t0 CPU time #search mWER Method [sec] error [%] QmS 0.0 0.07 108 42:6 1.0 0.13 85 37:8 2.5 0.35 44 36:6 5.0 1.92 4 34:6 10.0 10.6 0 34:5 IbmS 0.0 0.14 108 43:4 1.0 0.3 84 39:5 2.5 0.8 45 39:1 5.0 4.99 7 38:3 10.0 28.52 0 38:2 Table 6 shows example translations obtained by the three different approaches.
0	Again, the monotone search performs worst.
0	In the second and third translation examples, the IbmS word reordering performs worse than the QmS word reordering, since it can not take properly into account the word reordering due to the German verbgroup.
0	The German finite verbs 'bin' (second example) and 'konnten' (third example) are too far away from the personal pronouns 'ich' and 'Sie' (6 respectively 5 source sentence positions).
0	In the last example, the less restrictive IbmS word reordering leads to a better translation, although the QmS translation is still acceptable.
0	In this paper, we have presented a new, eÆcient DP-based search procedure for statistical machine translation.
0	The approach assumes that the word reordering is restricted to a few positions in the source sentence.
0	The approach has been successfully tested on the 8 000-word Verbmobil task.
0	Future extensions of the system might include: 1) An extended translation model, where we use more context to predict a source word.
0	2) An improved language model, which takes into account syntactic structure, e.g. to ensure that a proper English verbgroup is generated.
0	3) A tight coupling with the speech recognizer output.
0	This work has been supported as part of the Verbmobil project (contract number 01 IV 601 A) by the German Federal Ministry of Education, Science, Research and Technology and as part of the Eutrans project (ESPRIT project number 30268) by the European Community.
0	Table 6: Example Translations for the Verbmobil task.
0	Input: Ja , wunderbar . Konnen wir machen . MonS: Yes, wonderful.
0	Can we do . QmS: Yes, wonderful.
0	We can do that . IbmS: Yes, wonderful.
0	We can do that . Input: Das ist zu knapp , weil ich ab dem dritten in Kaiserslautern bin . Genaugenommen nur am dritten . Wie ware es denn am ahm Samstag , dem zehnten Februar ? MonS: That is too tight , because I from the third in Kaiserslautern . In fact only on the third . How about ahm Saturday , the tenth of February ? QmS: That is too tight , because I am from the third in Kaiserslautern . In fact only on the third . Ahm how about Saturday , February the tenth ? IbmS: That is too tight , from the third because I will be in Kaiserslautern . In fact only on the third . Ahm how about Saturday , February the tenth ? Input: Wenn Sie dann noch den siebzehnten konnten , ware das toll , ja . MonS: If you then also the seventeenth could , would be the great , yes . QmS: If you could then also the seventeenth , that would be great , yes . IbmS: Then if you could even take seventeenth , that would be great , yes . Input: Ja , das kommt mir sehr gelegen . Machen wir es dann am besten so . MonS: Yes , that suits me perfectly . Do we should best like that . QmS: Yes , that suits me fine . We do it like that then best . IbmS: Yes , that suits me fine . We should best do it like that .
